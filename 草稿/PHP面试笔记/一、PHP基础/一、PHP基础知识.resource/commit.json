{"compress":true,"commitItems":[["a4cbef87-054c-4953-9239-c880a8096d3d",1521080837964,"",[[1521080804677,["fangle@fangle-PC",[[1,0,"PHP基础知识\n===\n\n\n#### 引用变量\n在PHP中引用意味着用不同名字访问同一个变量的内容\n> 引用的本质是别名而不是指针\n\n思考：\n```\n<?php\n$a = range(0,100);\n$b = $a;\n```\n此时$a 与 $b 指向的是同一块内存空间吗？\n是的。PHP有一个机制叫做COW机制，也就是Copy On write 。只有$a 或 $b 发生写操作时，才会开辟一块新的空间，$a和$b 才指向不同的内存块。\n证明：\n```\n$a = range(0,100);\nvar_dump(memory_get_usage());\n\n$b = $a;\nvar_dump(memory_get_usage());\n\n$a = range(0,100);\nvar_dump(memory_get_usage());\n```\n使用引用的话，就不会触发写时复制机制\n```\n<?php\n$a = range(0,100);\nvar_dump(memory_get_usage());\n\n$b = &$a;\nvar_dump(memory_get_usage());\n\n$a = range(0,100);\nvar_dump(memory_get_usage());\n```\n\n#### zval 结构体\nPHP的变量都是基于zval结构体的,也就是说zval是PHP变量的容器\n```\n<?php\n$a = range(0,100);\nxdebug_debug_zval('a');\n\n$b = $a;\nxdebug_debug_zval('a');\n\n$a = range(0,100);\nxdebug_debug_zval('a');\n```\n\n#### unset()与引用\n> unset 只会取消引用不会销毁内存空间\n\n```\n<?php\n$a = 1;\n$b = &$a;\nunset($b);\necho $a;\n```\n\n#### 对象与引用\n> 在PHP中，对象默认的传值方式是引用而不是赋值。所以，不用加&。\n\n```\n<?php\nclass Person\n{\n    public $name;    \n}\n\n$p1 = new Person();\nxdebug_debug_zval('p1');\n\n$p2 = p1;\nxdebug_debug_zval('p1');\n\n$p2->name = 'fangle';\nxdebug_debug_zval('p1');\n```\n\n#### 面试题\n```\n<?php\n$data = ['a','b','c'];\n\nforeach($data as $key => $val){\n    $val = &$data[$key];\n}\n//每一次循环结束后$data的值是什么?\n```\n解答\n```\n$key = 0\n$val = a\n$val = &$data[0] = a\n\n$key = 1\n$val = b => $data[0]=b\n$val = &$data[1] = b\n\n$key = 2\n$val = c => $data[1] = c\n$val = &$data[2] = c\n\n所以\n$data = ['b','c','c'];\n```\n> 谨慎foreach中使用引用带来的影响\n\n```\n$test = ['a','b','c'];\nforeach($test as &$value){  \n     echo $value;  \n} \n\n$num = [1,2,3]\nforeach($num as $value){  \n     echo $value;  \n}  \n```"]],[0,0],[1542,1542]]],[1521080812529,["fangle@fangle-PC",[[-1,17,"#"]],[17,18],[17,17]]],[1521080816724,["fangle@fangle-PC",[[-1,16,"# "]],[16,18],[16,16]]],[1521080827040,["fangle@fangle-PC",[[1,16,"# "]],[16,16],[18,18]]],[1521080847079,["fangle@fangle-PC",[[-1,15,"##"]],[15,17],[15,15]]],[1521080858887,["fangle@fangle-PC",[[1,15,"##"]],[15,15],[17,17]]],[1521080875923,["fangle@fangle-PC",[[-1,8,"==="],[1,11,"---"]],[11,11],[11,11]]],[1521080881081,["fangle@fangle-PC",[[-1,10,"-"]],[11,11],[10,10]]],[1521080882258,["fangle@fangle-PC",[[1,10,"-"]],[10,10],[11,11]]],[1521080882715,["fangle@fangle-PC",[[1,14,"\n"]],[11,11],[12,12]]],[1521080884941,["fangle@fangle-PC",[[1,12,"----"]],[12,12],[16,16]]],[1521080887375,["fangle@fangle-PC",[[-1,12,"----"]],[16,16],[12,12]]],[1521080888692,["fangle@fangle-PC",[[1,12,"---"]],[12,12],[15,15]]],[1521080890432,["fangle@fangle-PC",[[-1,12,"---"]],[15,15],[12,12]]],[1521080891033,["fangle@fangle-PC",[[-1,14,"\n"]],[12,12],[11,11]]],[1521080892025,["fangle@fangle-PC",[[1,11,"="]],[11,11],[12,12]]],[1521080894023,["fangle@fangle-PC",[[-1,8,"---="]],[12,12],[8,8]]],[1521080896447,["fangle@fangle-PC",[[1,8,"==="]],[8,8],[11,11]]],[1521080913592,["fangle@fangle-PC",[[-1,14,"### "]],[14,18],[14,14]]],[1521080914654,["fangle@fangle-PC",[[1,14,"y"]],[14,14],[15,15]]],[1521080915258,["fangle@fangle-PC",[[-1,14,"y"]],[15,15],[14,14]]],[1521080921229,["fangle@fangle-PC",[[1,19,"\n"]],[18,18],[19,19]]],[1521080924211,["fangle@fangle-PC",[[1,19,"---"]],[19,19],[22,22]]],[1521080931004,["fangle@fangle-PC",[[1,23,"\n"]],[22,22],[23,23]]],[1521080958501,["fangle@fangle-PC",[[1,24,"\n"]],[23,23],[24,24]]],[1521080964491,["fangle@fangle-PC",[[1,24,"####"]],[24,24],[28,28]]],[1521080965449,["fangle@fangle-PC",[[-1,27,"#"]],[28,28],[27,27]]],[1521080968204,["fangle@fangle-PC",[[1,27," yingy"]],[27,27],[33,33]]],[1521080969623,["fangle@fangle-PC",[[-1,28,"yingy"]],[33,33],[28,28]]],[1521080971861,["fangle@fangle-PC",[[1,28,"y"]],[28,28],[29,29]]],[1521080972543,["fangle@fangle-PC",[[-1,28,"y"]],[29,29],[28,28]]],[1521080977846,["fangle@fangle-PC",[[1,28,"引用变量"]],[28,28],[32,32]]],[1521080980279,["fangle@fangle-PC",[[-1,16,"变量"]],[18,18],[16,16]]],[1521080986874,["fangle@fangle-PC",[[-1,554,"#"]],[554,555],[554,554]]],[1521080990932,["fangle@fangle-PC",[[-1,740,"# "]],[740,742],[740,740]]],[1521080991191,["fangle@fangle-PC",[[1,740," "]],[740,740],[741,741]]],[1521080997074,["fangle@fangle-PC",[[-1,832,"#"],[1,833,"】"]],[832,833],[833,833]]],[1521080998418,["fangle@fangle-PC",[[-1,832,"】"]],[833,833],[832,832]]],[1521081008388,["fangle@fangle-PC",[[-1,1062,"#"]],[1062,1063],[1062,1062]]],[1521081016779,["fangle@fangle-PC",[[1,1063,"引用相关"]],[1063,1063],[1067,1067]]],[1521081017947,["fangle@fangle-PC",[[-1,1063,"引用相关"]],[1067,1067],[1063,1063]]],[1521081024730,["fangle@fangle-PC",[[1,1545,"\n\n"]],[1545,1545],[1546,1546]]],[1521081025035,["fangle@fangle-PC",[[1,1547,"\n"]],[1546,1546],[1547,1547]]],[1521081026219,["fangle@fangle-PC",[[-1,1547,"\n"],[1,1548,"---"]],[1547,1547],[1550,1550]]],[1521081070701,["fangle@fangle-PC",[[1,1550,"\n\n### PHP字符串3种定义方式\n- 单引号\n- 双引号\n- heredoc 和 newdoc\n\n区别：\n- 单引号不能解析变量\n- 单引号不能解析转义字符，只能解析单引号和反斜线本身\n- 双引号可以解析变量，变量可以使用特殊字符和{}包含\n- 双引号可以解析所有的转义字符\n- 单引号的效率要明显高于双引号\n\nheredoc 和 newdoc\nheredoc 和 newdoc 通俗来说就是定界符,主要用来处理长字符串或大文本\nheredoc 相当于双引号，newdoc相当于当引号\n```\n<?php\n$str = <<< EOL\n\nEOL\n\n$str = <<< 'EOL'\n\nEOL\n```\n### PHP数据类型\n#### 三大数据类型\n- 标量\n\t- 整型\n\t- 浮点\n\t- 字符串\n\t- 布尔\n- 复合\n\t- 数组\n\t- 对象\n- 特殊\n \t- null\n\t- 资源\n\n##### 标量类型\n- 浮点类型不能用于直接比较大小 (IEEI754标准)\n- 布尔false 七种情况 \n\t- 整型 0 \n\t- 浮点型 0.0\n\t- 字符串 ' ' 和 '0'\n\t- 布尔型 false\n\t- 数组 [] \n\t- null\n\n### 数组类型\n#### 超全局数组\n- $GLOBALS\n- $_GET\n- $_POST\n- $_REQUEST\n- $_SESSION\n- $_COOKLE\n- $_SERVER\n- $_FILES\n- $_ENV\n\n#### $_SERVER\n- $_SERVER['SERVER_ADDR'] 服务端IP地址\n- $_SERVER['SERVER_NAME'] 服务器名称\n- $_SERVER['REQUEST_TIME'] 请求时间\n- $_SERVER['QUERY_STRING'] URL问号携带的字符串\n- $_SERVER['REMOTE_ADDR'] 客户端IP \n\n### 常量的两种定义方式\n- const\n- define()\n\n区别：\nconst 是语言结构，define() 是函数\nconst 比define更快\nconst 可用来定义类常量，define 不行\n\n- 预定义常量"]],[1550,1550],[2478,2478]]],[1521081138002,[null,[[-1,1551,"\n"],[1,2479,"\n"]],[1551,1551],[2480,2480]]],[1521081138002,[null,[[1,1551,"\n"],[-1,2478,"\n"]],[2480,2480],[1551,1551]]],[1521081078174,["fangle@fangle-PC",[[1,1547,"\n"]],[1546,1546],[1547,1547]]],[1521081083941,["fangle@fangle-PC",[[1,1547,"常量与数据类型"]],[1547,1547],[1554,1554]]],[1521081197998,[null,[[-1,1559,"\n"],[1,2487,"\n"]],[1559,1559],[2488,2488]]],[1521081197998,[null,[[1,1559,"\n"],[-1,2486,"\n"]],[2488,2488],[1559,1559]]],[1521081155453,["fangle@fangle-PC",[[-1,1563,"PHP"]],[1563,1566],[1563,1563]]],[1521081184955,["fangle@fangle-PC",[[-1,1868,"#### 三大数据类型\n- 标量\n\t- 整型\n\t- 浮点\n\t- 字符串\n\t- 布尔\n- 复合\n\t- 数组\n\t- 对象\n- 特殊\n \t- null\n\t- 资源"]],[1868,1946],[1868,1868]]],[1521081188874,["fangle@fangle-PC",[[1,1559,"\n"]],[1558,1558],[1559,1559]]],[1521081190690,["fangle@fangle-PC",[[1,1559,"#### 三大数据类型\n- 标量\n\t- 整型\n\t- 浮点\n\t- 字符串\n\t- 布尔\n- 复合\n\t- 数组\n\t- 对象\n- 特殊\n \t- null\n\t- 资源"]],[1559,1559],[1637,1637]]],[1521081258004,[null,[[-1,1638,"\n"],[-1,1642,"P"],[1,1643," "],[-1,1947,"源"],[1,1948,"\n"],[1,2485,"\n"]],[1638,1638],[2486,2486]]],[1521081258004,[null,[[1,1638,"\n"],[1,1641,"P"],[-1,1641," "],[1,1946,"源"],[-1,1946,"\n"],[-1,2484,"\n"]],[2486,2486],[1638,1638]]],[1521081199729,["fangle@fangle-PC",[[1,1638,"\n"]],[1637,1637],[1638,1638]]],[1521081204579,["fangle@fangle-PC",[[-1,1562,"#"]],[1562,1563],[1562,1562]]],[1521081207950,["fangle@fangle-PC",[[1,1559,"\n"]],[1559,1559],[1560,1560]]],[1521081225773,["fangle@fangle-PC",[[-1,1950,"##### 标量类型\n- 浮点类型不能用于直接比较大小 (IEEI754标准)\n- 布尔false 七种情况 \n\t- 整型 0 \n\t- 浮点型 0.0\n\t- 字符串 ' ' 和 '0'\n\t- 布尔型 false\n\t- 数组 [] \n\t- null\n"]],[1950,2074],[1950,1950]]],[1521081231960,["fangle@fangle-PC",[[1,1639,"\n"]],[1638,1638],[1639,1639]]],[1521081233279,["fangle@fangle-PC",[[1,1640,"\n"]],[1638,1638],[1639,1639]]],[1521081234074,["fangle@fangle-PC",[[1,1639,"##### 标量类型\n- 浮点类型不能用于直接比较大小 (IEEI754标准)\n- 布尔false 七种情况 \n\t- 整型 0 \n\t- 浮点型 0.0\n\t- 字符串 ' ' 和 '0'\n\t- 布尔型 false\n\t- 数组 [] \n\t- null\n"]],[1639,1639],[1763,1763]]],[1521081240780,["fangle@fangle-PC",[[-1,1642,"##"]],[1644,1644],[1642,1642]]],[1521081318001,[null,[[-1,1763,"\n"],[-1,1767,"P"],[1,1768," "],[-1,2072,"源"],[1,2073,"\n"],[1,2486,"\n"]],[1763,1763],[2487,2487]]],[1521081318001,[null,[[1,1763,"\n"],[1,1766,"P"],[-1,1766," "],[1,2071,"源"],[-1,2071,"\n"],[-1,2485,"\n"]],[2487,2487],[1763,1763]]],[1521081312725,["fangle@fangle-PC",[[1,2486,"\n"]],[2485,2485],[2486,2486]]],[1521081313002,["fangle@fangle-PC",[[1,2487,"\n"]],[2486,2486],[2487,2487]]],[1521081316105,["fangle@fangle-PC",[[-1,2487,"\n"],[1,2488,"---"]],[2487,2487],[2490,2490]]],[1521081317079,["fangle@fangle-PC",[[1,2487,"\n"]],[2486,2486],[2487,2487]]],[1521081378002,[null,[[-1,1763,"\n"],[-1,1767,"P"],[1,1768," "],[-1,2072,"源"],[1,2073,"\n"],[1,2486,"\n"]],[1763,1763],[2487,2487]]],[1521081378002,[null,[[1,1763,"\n"],[1,1766,"P"],[-1,1766," "],[1,2071,"源"],[-1,2071,"\n"],[-1,2485,"\n"]],[2487,2487],[1763,1763]]],[1521081320695,["fangle@fangle-PC",[[1,2487,"运算发"]],[2487,2487],[2490,2490]]],[1521081321552,["fangle@fangle-PC",[[-1,2489,"发"]],[2490,2490],[2489,2489]]],[1521081322526,["fangle@fangle-PC",[[1,2489,"符"]],[2489,2489],[2490,2490]]],[1521081326872,["fangle@fangle-PC",[[1,2494,"\n\n> foo() 和 @foo() 的区别？\n> @是错误抑止运算符，将其放置在一个表达式之前，该表达式可能产生的任何错误都会被忽略\n\n### 运算符优先级\nhttp://php.net/manual/zh/language.operators.precedence.php\n\n### == 和 === 的区别\n- == 表示相等，只要值相等就为真\n- === 表示全等，只有值和类型同时相等，才为真\n\n### 递增递减符\n- 递增递减不影响布尔类型\n- 递减null 值无效果\n- 递增null 值为 1\n- 递增和递减在前就先运算 后返回，在后就先返回后运算\n- i++ 要不 ++ i 要慢 \n\n### 逻辑运算符\n- 短路作用\n- || && 比 and or 的运算级高\n```\n$a = false || true\n$b = false or true\n```\n\n\n"]],[2494,2494],[2883,2883]]],[1521081347137,["fangle@fangle-PC",[[-1,2495,"> foo() 和 @foo() 的区别？\n> @是错误抑止运算符，将其放置在一个表达式之前，该表达式可能产生的任何错误都会被忽略"]],[2495,2560],[2495,2495]]],[1521081354636,["fangle@fangle-PC",[[1,2819,"\n"]],[2816,2816],[2817,2817]]],[1521081356879,["fangle@fangle-PC",[[1,2817,"### "]],[2817,2817],[2821,2821]]],[1521081359133,["fangle@fangle-PC",[[1,2824,"\n"]],[2821,2821],[2822,2822]]],[1521081372953,["fangle@fangle-PC",[[1,2821,"错误抑制运算符"]],[2821,2821],[2828,2828]]],[1521081373382,["fangle@fangle-PC",[[1,2832,"\n"]],[2828,2828],[2829,2829]]],[1521081374175,["fangle@fangle-PC",[[1,2829,"> foo() 和 @foo() 的区别？\n> @是错误抑止运算符，将其放置在一个表达式之前，该表达式可能产生的任何错误都会被忽略"]],[2829,2829],[2894,2894]]],[1521081438008,[null,[[-1,1763,"\n"],[-1,1767,"P"],[1,1768," "],[-1,2072,"源"],[1,2073,"\n"],[1,2487,"\n"],[-1,2495,"略"],[1,2497,""],[-1,2813,""],[1,2816,"\n"]],[1763,1763],[2817,2817]]],[1521081438008,[null,[[1,1763,"\n"],[1,1766,"P"],[-1,1766," "],[1,2071,"源"],[-1,2071,"\n"],[-1,2486,"\n"],[1,2495,"略"],[-1,2496,""],[1,2812,""],[-1,2815,"\n"]],[2817,2817],[1763,1763]]],[1521081383273,["fangle@fangle-PC",[[-1,2496,"\n"]],[2496,2496],[2495,2495]]],[1521081415087,["fangle@fangle-PC",[[1,2895,"----"]],[2895,2895],[2899,2899]]],[1521081416613,["fangle@fangle-PC",[[-1,2898,"-"]],[2899,2899],[2898,2898]]],[1521081418617,["fangle@fangle-PC",[[1,2895,"\n"]],[2894,2894],[2895,2895]]],[1521081423794,["fangle@fangle-PC",[[1,2895,"流程控制"]],[2895,2895],[2899,2899]]],[1521081426458,["fangle@fangle-PC",[[1,2904,"- 请列出PHP 三中数组循环操作的语法，并注明各种循环的区别\n```\n$arr = [];\n\n// for 循环  只能遍历索引数组\nfor($i=)\n\n// foreach 循环  既能遍历索引数组和关联数组\n// foreach 循环 一开始的时候 就会reset数组指针\n \n// while + list() + each() 既能遍历索引数组和关联数组\n// while + list() + each() 组合不会reset()数组指针\n// 所以 while 有可能只遍历了数组的第一部分，建议遍历前先重置一下数组指针\nwhile(list($k,$v)=each($arr)){\n}\n```\n\n- switch 的case 只能是 整型 浮点型 和字符串类型\n- continue 作用于 switch 相当于 breake\n- switch 会生成跳转表，效率要不if else 高一些\n- continue 和 breake 后可以加 数字 表示跳出几层 默认 不写就是1 （continue 2 ）\n\n### PHP中如何优化多个 if else 语句\n- 表达式可能性高的放前面\n- 考虑使用switch"]],[2904,2904],[3419,3419]]],[1521081433367,["fangle@fangle-PC",[[1,2904,"\n"]],[2903,2903],[2904,2904]]],[1521081434611,["fangle@fangle-PC",[[1,2905,"\n"]],[2904,2904],[2905,2905]]],[1521081437090,["fangle@fangle-PC",[[1,2905,"### "]],[2905,2905],[2909,2909]]],[1521081498013,[null,[[-1,1763,"\n"],[-1,1767,"P"],[1,1768," "],[-1,2072,"源"],[1,2073,"\n"],[1,2487,"\n"],[-1,2495,"略"],[1,2497,""],[-1,2812,""],[1,2815,"\n"]],[1763,1763],[2816,2816]]],[1521081498013,[null,[[1,1763,"\n"],[1,1766,"P"],[-1,1766," "],[1,2071,"源"],[-1,2071,"\n"],[-1,2486,"\n"],[1,2495,"略"],[-1,2496,""],[1,2811,""],[-1,2814,"\n"]],[2816,2816],[1763,1763]]],[1521081438049,["fangle@fangle-PC",[[1,2909,"3"]],[2909,2909],[2910,2910]]],[1521081439112,["fangle@fangle-PC",[[-1,2909,"3"]],[2910,2910],[2909,2909]]],[1521081441400,["fangle@fangle-PC",[[1,2909,"三中"]],[2909,2909],[2911,2911]]],[1521081441865,["fangle@fangle-PC",[[-1,2910,"中"]],[2911,2911],[2910,2910]]],[1521081447752,["fangle@fangle-PC",[[1,2910,"种循环数组的方式"]],[2910,2910],[2918,2918]]],[1521081467783,["fangle@fangle-PC",[[1,3224,"### switch的"]],[3224,3224],[3235,3235]]],[1521081476418,["fangle@fangle-PC",[[-1,3234,"的"]],[3235,3235],[3234,3234]]],[1521081479915,["fangle@fangle-PC",[[1,3234,"注意点"]],[3234,3234],[3237,3237]]],[1521081491486,["fangle@fangle-PC",[[-1,3399,"PHP中如何"]],[3399,3405],[3399,3399]]],[1521081494116,["fangle@fangle-PC",[[1,3442,"\n"]],[3441,3441],[3442,3442]]],[1521081494322,["fangle@fangle-PC",[[1,3443,"\n"]],[3442,3442],[3443,3443]]],[1521081497276,["fangle@fangle-PC",[[-1,3443,"\n"],[1,3444,"---"]],[3443,3443],[3446,3446]]],[1521081558016,[null,[[-1,1763,"\n"],[-1,1767,"P"],[1,1768," "],[-1,2072,"源"],[1,2073,"\n"],[1,2487,"\n"],[-1,2495,"略"],[1,2497,""],[-1,2812,""],[1,2815,"\n"]],[1763,1763],[2816,2816]]],[1521081558016,[null,[[1,1763,"\n"],[1,1766,"P"],[-1,1766," "],[1,2071,"源"],[-1,2071,"\n"],[-1,2486,"\n"],[1,2495,"略"],[-1,2496,""],[1,2811,""],[-1,2814,"\n"]],[2816,2816],[1763,1763]]],[1521081517764,["fangle@fangle-PC",[[1,14,"\n"]],[13,13],[14,14]]],[1521081519665,["fangle@fangle-PC",[[1,13,"---"]],[13,13],[16,16]]],[1521081528065,["fangle@fangle-PC",[[1,21,"\n"]],[20,20],[21,21]]],[1521081529538,["fangle@fangle-PC",[[-1,21,"\n"]],[21,21],[20,20]]],[1521081618014,[null,[[-1,1767,"\n"],[-1,1771,"P"],[1,1772," "],[-1,2076,"源"],[1,2077,"\n"],[1,2491,"\n"],[-1,2499,"略"],[1,2501,""],[-1,2816,""],[1,2819,"\n"]],[1767,1767],[2820,2820]]],[1521081618014,[null,[[1,1767,"\n"],[1,1770,"P"],[-1,1770," "],[1,2075,"源"],[-1,2075,"\n"],[-1,2490,"\n"],[1,2499,"略"],[-1,2500,""],[1,2815,""],[-1,2818,"\n"]],[2820,2820],[1767,1767]]],[1521081570490,["fangle@fangle-PC",[[1,1551,"\n"]],[1550,1550],[1551,1551]]],[1521081572579,["fangle@fangle-PC",[[1,1552,"\n"]],[1550,1550],[1551,1551]]],[1521081574110,["fangle@fangle-PC",[[1,1551,"----"]],[1551,1551],[1555,1555]]],[1521081575862,["fangle@fangle-PC",[[-1,1554,"-"]],[1555,1555],[1554,1554]]],[1521081581482,["fangle@fangle-PC",[[1,1564,"\n"]],[1564,1564],[1565,1565]]],[1521081584190,["fangle@fangle-PC",[[-1,1564,"\n"]],[1565,1565],[1564,1564]]],[1521081595266,["fangle@fangle-PC",[[1,2496,"\n"]],[2495,2495],[2496,2496]]],[1521081596348,["fangle@fangle-PC",[[1,2497,"\n"]],[2495,2495],[2496,2496]]],[1521081597517,["fangle@fangle-PC",[[1,2496,"---"]],[2496,2496],[2499,2499]]],[1521081604525,["fangle@fangle-PC",[[1,2909,"\n"]],[2908,2908],[2909,2909]]],[1521081604716,["fangle@fangle-PC",[[1,2910,"\n"]],[2909,2909],[2910,2910]]],[1521081605648,["fangle@fangle-PC",[[1,2911,"\n"]],[2909,2909],[2910,2910]]],[1521081606883,["fangle@fangle-PC",[[1,2910,"---"]],[2910,2910],[2913,2913]]],[1521081617033,["fangle@fangle-PC",[[1,3466,"\n\n"]],[3466,3466],[3467,3467]]],[1521081617206,["fangle@fangle-PC",[[1,3468,"\n"]],[3467,3467],[3468,3468]]],[1521081678015,[null,[[-1,1772,"\n"],[-1,1776,"P"],[1,1777," "],[-1,2081,"源"],[1,2082,"\n"],[1,2496,"\n"],[-1,2509,"略"],[1,2511,""],[-1,2826,""],[1,2829,"\n"]],[1772,1772],[2830,2830]]],[1521081678015,[null,[[1,1772,"\n"],[1,1775,"P"],[-1,1775," "],[1,2080,"源"],[-1,2080,"\n"],[-1,2495,"\n"],[1,2509,"略"],[-1,2510,""],[1,2825,""],[-1,2828,"\n"]],[2830,2830],[1772,1772]]],[1521081671358,["fangle@fangle-PC",[[1,3468,"写出一下程序的输出结果\n```\n<?php\nfunction get_count()\n{\n\tstatic $count = 0;\n\treturn $count++;\n}\n$count = 5;\necho $count;\n$count++;\nehco get_count();\necho get_count();\n```\n\n### 变量作用域\n全局变量\n```\n<?php\n$a = 1;\nfunction foo()\n{\n\t$GLOBALS['a'] = 2;\n}\necho $a;\n```\n静态变量\n- 仅初始化一次\n- 初始化时需要赋值(也就是static $i = 后面的数必须是常量 否则会报语法错误)\n- 每次执行，该值都会保存\n- static 是局部变量\n- 常用来记录调用次数，结束递归\n\n#### 返回值\n- 省略return ，返回值为null\n- 存在static时，返回引用。\n```\n<?php\nfunction &foo()\n{\n\tstatic $i = 'foo';\n\treturn $i;\n}\n\n$a = foo();\necho $a;\necho PHP_EOL;\n\n$a = &foo();\necho $a;\necho PHP_EOL;\n\n$a = 'hello world';\necho foo();\n```\n或参数为引用变量也可以\n```\n<?php\nfunction &foo(&$i)\n{\n\t$i.= ' foo';\n\treturn $i;\n}\n\n$first = 'hello';\n$a = &foo($first);\necho $a;\necho PHP_EOL;\necho $first;\necho PHP_EOL;\n\n$a = 'bye world';\necho $first;\n```\n上面这两种很少使用，返回引用类型的一个稍微实际点的用处，可能就是用来重置static 变量的值吧。\n\n#### 自带函数\n\n##### 时间函数\n- date()\n- strtotime()\n- mktime() 取得一个日期的 Unix 时间戳\n- time()\n- microtime()\n- date_default_timezone_set() 设定用于一个脚本中所有日期时间函数的默认时区(有对应的get 方法)\n\n##### 打印处理函数\n- print(string)\nprint实际上不是函数（而是语言结构），所以可以不用圆括号包围参数列表。\n和 echo 最主要的区别： print 仅支持一个参数，并总是返回1\n- printf()\nprintf => print+format => 格式化输出\n返回输出字符串的长度\n- sprintf()\n与printf一样格式化，区别在于printf是直接输出，sprintf()不输出 返回这个格式化后的数组\n- print_r()\n打印关于变量的易于理解的信息\n- echo\n- var_dump\n打印变量的相关信息\n- var_export()\n输出或返回一个变量的字符串表示，它和 var_dump() 类似，不同的是其返回的表示是合法的 PHP 代码。\n\n#### 序列化函数和反序列化函数\n- serialize 产生一个可存储的值的表示\n- unserialize 从已存储的表示中创建 PHP 的值\n\n#### 字符串处理函数\n- trim\n- explode  字符串切成数组\n- join  数组切成字符串  =>  implode 函数的别名\n- strrev  反转字符串\n- strstr  查找字符串的首次出现\n- number_format 以千位分隔符方式格式化一个数字，传入float类型 返回string 类型\n\n#### 数组函数\n- array_keys\n- array_values\n- array_diff 返回数组中不同的键值对\n- array_intersect 计算数组的交集\n\n### 正则表达式\n写出 11 位手机号码的正则表达式\n> 正则表达式的作用：分割，查找，匹配，替换字符串\n\n- 分隔符\n/ , #, ~  业界常用 /\n- 通用原子\n\\d => (0-9) , \\D => (\\d 取反) , \\s => (空白符) , \\S , \\w , \\W\n- 元字符\n. * ? ^ $ + {n} {n,} {n,m} [] () [^] | [-]\n- 模式修正符\ni m e(php7取消) s U x A D u\n- 后向引用\n- 贪婪模式\n- 常用函数\npreg_match()  preg_match_all() preg_replace() preg_split()\n- 中文匹配\nutf8 汉字编码范围0x4e00-0x9fa5 \ngb2312编码范围 0xb0-0xf7 0xa1-0xfe\nutf8要使用U修正符使模式字符串被当成utf8 \ngb2312要使用chr将ASCII码转为字符\n- 写正则的技巧\n先写出要匹配的字符串\n自左向右的顺序使用正则表达式的原子和元字符进行拼接\n最终加入模式修正符"]],[3468,3468],[5605,5605]]],[1521081738026,[null,[[-1,1772,"\n"],[-1,1776,"P"],[1,1777," "],[-1,2081,"源"],[1,2082,"\n"],[1,2496,"\n"],[-1,2509,"略"],[1,2511,""],[-1,2826,""],[1,2829,"\n"]],[1772,1772],[2830,2830]]],[1521081738026,[null,[[1,1772,"\n"],[1,1775,"P"],[-1,1775," "],[1,2080,"源"],[-1,2080,"\n"],[-1,2495,"\n"],[1,2509,"略"],[-1,2510,""],[1,2825,""],[-1,2828,"\n"]],[2830,2830],[1772,1772]]],[1521081694388,["fangle@fangle-PC",[[1,3468,"\n"]],[3467,3467],[3468,3468]]],[1521081695698,["fangle@fangle-PC",[[1,3469,"\n"]],[3467,3467],[3468,3468]]],[1521081698636,["fangle@fangle-PC",[[1,3468,"函数"]],[3468,3468],[3470,3470]]],[1521081699132,["fangle@fangle-PC",[[1,3472,"\n"]],[3470,3470],[3471,3471]]],[1521081700891,["fangle@fangle-PC",[[1,3471,"---"]],[3471,3471],[3474,3474]]],[1521081730369,["fangle@fangle-PC",[[1,3647,"#### "]],[3647,3647],[3652,3652]]],[1521081798034,[null,[[-1,1772,"\n"],[-1,1776,"P"],[1,1777," "],[-1,2081,"源"],[1,2082,"\n"],[1,2496,"\n"],[-1,2509,"略"],[1,2511,""],[-1,2826,""],[1,2829,"\n"]],[1772,1772],[2830,2830]]],[1521081798034,[null,[[1,1772,"\n"],[1,1775,"P"],[-1,1775," "],[1,2080,"源"],[-1,2080,"\n"],[-1,2495,"\n"],[1,2509,"略"],[-1,2510,""],[1,2825,""],[-1,2828,"\n"]],[2830,2830],[1772,1772]]],[1521081743722,["fangle@fangle-PC",[[-1,3476,"写出一下程序的输出结果\n```\n<?php\nfunction get_count()\n{\n\tstatic $count = 0;\n\treturn $count++;\n}\n$count = 5;\necho $count;\n$count++;\nehco get_count();\necho get_count();\n```"]],[3476,3635],[3476,3476]]],[1521081745057,["fangle@fangle-PC",[[-1,3477,"\n"]],[3476,3476],[3475,3475]]],[1521081745703,["fangle@fangle-PC",[[-1,3476,"\n"]],[3475,3475],[3474,3474]]],[1521081749206,["fangle@fangle-PC",[[1,3486,"\n"]],[3486,3486],[3487,3487]]],[1521081755469,["fangle@fangle-PC",[[1,3567,"#### "]],[3567,3567],[3572,3572]]],[1521081761310,["fangle@fangle-PC",[[1,3577,"\n"]],[3576,3576],[3577,3577]]],[1521081762300,["fangle@fangle-PC",[[1,3577,"写出一下程序的输出结果\n```\n<?php\nfunction get_count()\n{\n\tstatic $count = 0;\n\treturn $count++;\n}\n$count = 5;\necho $count;\n$count++;\nehco get_count();\necho get_count();\n```"]],[3577,3577],[3736,3736]]],[1521081778547,["fangle@fangle-PC",[[-1,3842,"#"]],[3842,3843],[3842,3842]]],[1521081797036,["fangle@fangle-PC",[[-1,3845,"值"]],[3846,3846],[3845,3845]]],[1521081858029,[null,[[-1,1772,"\n"],[-1,1776,"P"],[1,1777," "],[-1,2081,"源"],[1,2082,"\n"],[1,2496,"\n"],[-1,2509,"略"],[1,2511,""],[-1,2826,""],[1,2829,"\n"]],[1772,1772],[2830,2830]]],[1521081858029,[null,[[1,1772,"\n"],[1,1775,"P"],[-1,1775," "],[1,2080,"源"],[-1,2080,"\n"],[-1,2495,"\n"],[1,2509,"略"],[-1,2510,""],[1,2825,""],[-1,2828,"\n"]],[2830,2830],[1772,1772]]],[1521081800821,["fangle@fangle-PC",[[1,3845,"引用"]],[3845,3845],[3847,3847]]],[1521081825763,["fangle@fangle-PC",[[-1,4308,"#"]],[4308,4309],[4308,4308]]],[1521081835716,["fangle@fangle-PC",[[-1,4319,"#"]],[4319,4320],[4319,4319]]],[1521081839070,["fangle@fangle-PC",[[-1,4469,"#"]],[4469,4470],[4469,4469]]],[1521081918028,[null,[[-1,1772,"\n"],[-1,1776,"P"],[1,1777," "],[-1,2081,"源"],[1,2082,"\n"],[1,2496,"\n"],[-1,2509,"略"],[1,2511,""],[-1,2826,""],[1,2829,"\n"]],[1772,1772],[2830,2830]]],[1521081918028,[null,[[1,1772,"\n"],[1,1775,"P"],[-1,1775," "],[1,2080,"源"],[-1,2080,"\n"],[-1,2495,"\n"],[1,2509,"略"],[-1,2510,""],[1,2825,""],[-1,2828,"\n"]],[2830,2830],[1772,1772]]],[1521081888311,["fangle@fangle-PC",[[1,5621,"\n"]],[5620,5620],[5621,5621]]],[1521081888476,["fangle@fangle-PC",[[1,5622,"\n"]],[5621,5621],[5622,5622]]],[1521081890051,["fangle@fangle-PC",[[-1,5622,"\n"],[1,5623,"---"]],[5622,5622],[5625,5625]]],[1521081891325,["fangle@fangle-PC",[[1,5625,"\n\n"]],[5625,5625],[5626,5626]]],[1521081891741,["fangle@fangle-PC",[[1,5627,"\n"]],[5626,5626],[5627,5627]]],[1521082038045,[null,[[-1,1772,"\n"],[-1,1776,"P"],[1,1777," "],[-1,2081,"源"],[1,2082,"\n"],[1,2496,"\n"],[-1,2509,"略"],[1,2511,""],[-1,2826,""],[1,2829,"\n"]],[1772,1772],[2830,2830]]],[1521082038045,[null,[[1,1772,"\n"],[1,1775,"P"],[-1,1775," "],[1,2080,"源"],[-1,2080,"\n"],[-1,2495,"\n"],[1,2509,"略"],[-1,2510,""],[1,2825,""],[-1,2828,"\n"]],[2830,2830],[1772,1772]]],[1521081992053,["fangle@fangle-PC",[[-1,5627,"\n"],[1,5628,"文件与目录处理"]],[5627,5627],[5634,5634]]],[1521081993153,["fangle@fangle-PC",[[1,5634,"\n\n"]],[5634,5634],[5635,5635]]],[1521081995414,["fangle@fangle-PC",[[-1,5635,"\n"],[1,5636,"---"]],[5635,5635],[5638,5638]]],[1521081996325,["fangle@fangle-PC",[[1,5638,"\n\n"]],[5638,5638],[5639,5639]]],[1521081996926,["fangle@fangle-PC",[[1,5640,"\n"]],[5639,5639],[5640,5640]]],[1521081998779,["fangle@fangle-PC",[[1,5640,"- fopen()\nr 只读\nr+ 读写\nw 只写\nw+ 读写\na 追加\na+ 追加+读\nb 打开二进制文件\nfile_get_contents\nfile_put_contents\n\n\n读取远程文件\nphp.ini 需开启 allow_url_fopen,http协议只能是只读模式，ftp可以是只读和只写模式。\n\n#### 目录相关函数\n名称相关 ： basename dirname pathinfo\n目录读取 ： opendir  readdir closedir rewinddir\n删除目录 ： rmdir  (该目录下必须为空才能删除)\n创建目录  ： mkdir \n磁盘大小 disk_free_space disk_total_space\n文件类型 filetype\n重名 rename 同时可以移动路径\n文件锁 flock\n\n#### 面试题 \n通过PHP函数对目录进行遍历\n```\nfunction loopDir($dir)\n{\n\t$handle = opendir($dir);\n\t\n\twhile(false!==($file = readdir($handle))){\n\t\tif($file != '.' && $file != '..'){\n\t\t\techo $file.PHP_EOL;\n\t\t\tif(filetype($dir.'/'.$file) == 'dir'){\n\t\t\t\tloopDir($dir.'/'.$file);\n\t\t\t}\n\t\t}\n\t}\n}\n```"]],[5640,5640],[6286,6286]]],[1521082022471,["fangle@fangle-PC",[[1,5733,"### "]],[5733,5733],[5737,5737]]],[1521082035311,["fangle@fangle-PC",[[-1,5805,"#"]],[5805,5806],[5805,5805]]],[1521082098048,[null,[[-1,1772,"\n"],[-1,1776,"P"],[1,1777," "],[-1,2081,"源"],[1,2082,"\n"],[1,2496,"\n"],[-1,2509,"略"],[1,2511,""],[-1,2826,""],[1,2829,"\n"]],[1772,1772],[2830,2830]]],[1521082098048,[null,[[1,1772,"\n"],[1,1775,"P"],[-1,1775," "],[1,2080,"源"],[-1,2080,"\n"],[-1,2495,"\n"],[1,2509,"略"],[-1,2510,""],[1,2825,""],[-1,2828,"\n"]],[2830,2830],[1772,1772]]],[1521082045448,["fangle@fangle-PC",[[-1,6018,"# "]],[6018,6020],[6018,6018]]],[1521082046870,["fangle@fangle-PC",[[1,6018," "]],[6018,6018],[6019,6019]]],[1521082058128,["fangle@fangle-PC",[[1,5640,"\n"]],[5639,5639],[5640,5640]]],[1521082067250,["fangle@fangle-PC",[[1,5640,"### 文件读取基本函数"]],[5640,5640],[5652,5652]]],[1521082079857,["fangle@fangle-PC",[[1,5662,"模式"]],[5662,5662],[5664,5664]]],[1521082086220,["fangle@fangle-PC",[[1,5710,"- "]],[5710,5710],[5712,5712]]],[1521082090167,["fangle@fangle-PC",[[1,5730,"- "]],[5730,5730],[5732,5732]]]]],["652a8f66-2658-4221-99dc-13cb2ffb0cf8",1521423115827,"PHP基础知识\n===\n\n---\n\n引用\n---\n\n### 引用变量\n在PHP中引用意味着用不同名字访问同一个变量的内容\n> 引用的本质是别名而不是指针\n\n思考：\n```\n<?php\n$a = range(0,100);\n$b = $a;\n```\n此时$a 与 $b 指向的是同一块内存空间吗？\n是的。PHP有一个机制叫做COW机制，也就是Copy On write 。只有$a 或 $b 发生写操作时，才会开辟一块新的空间，$a和$b 才指向不同的内存块。\n证明：\n```\n$a = range(0,100);\nvar_dump(memory_get_usage());\n\n$b = $a;\nvar_dump(memory_get_usage());\n\n$a = range(0,100);\nvar_dump(memory_get_usage());\n```\n使用引用的话，就不会触发写时复制机制\n```\n<?php\n$a = range(0,100);\nvar_dump(memory_get_usage());\n\n$b = &$a;\nvar_dump(memory_get_usage());\n\n$a = range(0,100);\nvar_dump(memory_get_usage());\n```\n\n### zval 结构体\nPHP的变量都是基于zval结构体的,也就是说zval是PHP变量的容器\n```\n<?php\n$a = range(0,100);\nxdebug_debug_zval('a');\n\n$b = $a;\nxdebug_debug_zval('a');\n\n$a = range(0,100);\nxdebug_debug_zval('a');\n```\n\n### unset()与引用\n> unset 只会取消引用不会销毁内存空间\n\n```\n<?php\n$a = 1;\n$b = &$a;\nunset($b);\necho $a;\n```\n\n### 对象与引用\n> 在PHP中，对象默认的传值方式是引用而不是赋值。所以，不用加&。\n\n```\n<?php\nclass Person\n{\n    public $name;    \n}\n\n$p1 = new Person();\nxdebug_debug_zval('p1');\n\n$p2 = p1;\nxdebug_debug_zval('p1');\n\n$p2->name = 'fangle';\nxdebug_debug_zval('p1');\n```\n\n### 面试题\n```\n<?php\n$data = ['a','b','c'];\n\nforeach($data as $key => $val){\n    $val = &$data[$key];\n}\n//每一次循环结束后$data的值是什么?\n```\n解答\n```\n$key = 0\n$val = a\n$val = &$data[0] = a\n\n$key = 1\n$val = b => $data[0]=b\n$val = &$data[1] = b\n\n$key = 2\n$val = c => $data[1] = c\n$val = &$data[2] = c\n\n所以\n$data = ['b','c','c'];\n```\n> 谨慎foreach中使用引用带来的影响\n\n```\n$test = ['a','b','c'];\nforeach($test as &$value){  \n     echo $value;  \n} \n\n$num = [1,2,3]\nforeach($num as $value){  \n     echo $value;  \n}  \n```\n\n---\n\n常量与数据类型\n---\n\n### 三大数据类型\n- 标量\n\t- 整型\n\t- 浮点\n\t- 字符串\n\t- 布尔\n- 复合\n\t- 数组\n\t- 对象\n- 特殊\n \t- null\n\t- 资源\n\n### 标量类型\n- 浮点类型不能用于直接比较大小 (IEEI754标准)\n- 布尔false 七种情况 \n\t- 整型 0 \n\t- 浮点型 0.0\n\t- 字符串 ' ' 和 '0'\n\t- 布尔型 false\n\t- 数组 [] \n\t- null\n\n\n### 字符串3种定义方式\n- 单引号\n- 双引号\n- heredoc 和 newdoc\n\n区别：\n- 单引号不能解析变量\n- 单引号不能解析转义字符，只能解析单引号和反斜线本身\n- 双引号可以解析变量，变量可以使用特殊字符和{}包含\n- 双引号可以解析所有的转义字符\n- 单引号的效率要明显高于双引号\n\nheredoc 和 newdoc\nheredoc 和 newdoc 通俗来说就是定界符,主要用来处理长字符串或大文本\nheredoc 相当于双引号，newdoc相当于当引号\n```\n<?php\n$str = <<< EOL\n\nEOL\n\n$str = <<< 'EOL'\n\nEOL\n```\n### PHP数据类型\n\n\n\n### 数组类型\n#### 超全局数组\n- $GLOBALS\n- $_GET\n- $_POST\n- $_REQUEST\n- $_SESSION\n- $_COOKLE\n- $_SERVER\n- $_FILES\n- $_ENV\n\n#### $_SERVER\n- $_SERVER['SERVER_ADDR'] 服务端IP地址\n- $_SERVER['SERVER_NAME'] 服务器名称\n- $_SERVER['REQUEST_TIME'] 请求时间\n- $_SERVER['QUERY_STRING'] URL问号携带的字符串\n- $_SERVER['REMOTE_ADDR'] 客户端IP \n\n### 常量的两种定义方式\n- const\n- define()\n\n区别：\nconst 是语言结构，define() 是函数\nconst 比define更快\nconst 可用来定义类常量，define 不行\n\n- 预定义常量\n\n---\n\n运算符\n---\n\n### 运算符优先级\nhttp://php.net/manual/zh/language.operators.precedence.php\n\n### == 和 === 的区别\n- == 表示相等，只要值相等就为真\n- === 表示全等，只有值和类型同时相等，才为真\n\n### 递增递减符\n- 递增递减不影响布尔类型\n- 递减null 值无效果\n- 递增null 值为 1\n- 递增和递减在前就先运算 后返回，在后就先返回后运算\n- i++ 要不 ++ i 要慢 \n\n### 逻辑运算符\n- 短路作用\n- || && 比 and or 的运算级高\n```\n$a = false || true\n$b = false or true\n```\n\n### 错误抑制运算符\n> foo() 和 @foo() 的区别？\n> @是错误抑止运算符，将其放置在一个表达式之前，该表达式可能产生的任何错误都会被忽略\n\n\n---\n\n流程控制\n---\n\n### 三种循环数组的方式\n- 请列出PHP 三中数组循环操作的语法，并注明各种循环的区别\n```\n$arr = [];\n\n// for 循环  只能遍历索引数组\nfor($i=)\n\n// foreach 循环  既能遍历索引数组和关联数组\n// foreach 循环 一开始的时候 就会reset数组指针\n \n// while + list() + each() 既能遍历索引数组和关联数组\n// while + list() + each() 组合不会reset()数组指针\n// 所以 while 有可能只遍历了数组的第一部分，建议遍历前先重置一下数组指针\nwhile(list($k,$v)=each($arr)){\n}\n```\n### switch注意点\n- switch 的case 只能是 整型 浮点型 和字符串类型\n- continue 作用于 switch 相当于 breake\n- switch 会生成跳转表，效率要不if else 高一些\n- continue 和 breake 后可以加 数字 表示跳出几层 默认 不写就是1 （continue 2 ）\n\n### 优化多个 if else 语句\n- 表达式可能性高的放前面\n- 考虑使用switch\n\n---\n\n函数\n---\n\n### 变量作用域\n\n#### 全局变量\n```\n<?php\n$a = 1;\nfunction foo()\n{\n\t$GLOBALS['a'] = 2;\n}\necho $a;\n```\n#### 静态变量\n写出一下程序的输出结果\n```\n<?php\nfunction get_count()\n{\n\tstatic $count = 0;\n\treturn $count++;\n}\n$count = 5;\necho $count;\n$count++;\nehco get_count();\necho get_count();\n```\n- 仅初始化一次\n- 初始化时需要赋值(也就是static $i = 后面的数必须是常量 否则会报语法错误)\n- 每次执行，该值都会保存\n- static 是局部变量\n- 常用来记录调用次数，结束递归\n\n### 返回引用\n- 省略return ，返回值为null\n- 存在static时，返回引用。\n```\n<?php\nfunction &foo()\n{\n\tstatic $i = 'foo';\n\treturn $i;\n}\n\n$a = foo();\necho $a;\necho PHP_EOL;\n\n$a = &foo();\necho $a;\necho PHP_EOL;\n\n$a = 'hello world';\necho foo();\n```\n或参数为引用变量也可以\n```\n<?php\nfunction &foo(&$i)\n{\n\t$i.= ' foo';\n\treturn $i;\n}\n\n$first = 'hello';\n$a = &foo($first);\necho $a;\necho PHP_EOL;\necho $first;\necho PHP_EOL;\n\n$a = 'bye world';\necho $first;\n```\n上面这两种很少使用，返回引用类型的一个稍微实际点的用处，可能就是用来重置static 变量的值吧。\n\n### 自带函数\n\n#### 时间函数\n- date()\n- strtotime()\n- mktime() 取得一个日期的 Unix 时间戳\n- time()\n- microtime()\n- date_default_timezone_set() 设定用于一个脚本中所有日期时间函数的默认时区(有对应的get 方法)\n\n#### 打印处理函数\n- print(string)\nprint实际上不是函数（而是语言结构），所以可以不用圆括号包围参数列表。\n和 echo 最主要的区别： print 仅支持一个参数，并总是返回1\n- printf()\nprintf => print+format => 格式化输出\n返回输出字符串的长度\n- sprintf()\n与printf一样格式化，区别在于printf是直接输出，sprintf()不输出 返回这个格式化后的数组\n- print_r()\n打印关于变量的易于理解的信息\n- echo\n- var_dump\n打印变量的相关信息\n- var_export()\n输出或返回一个变量的字符串表示，它和 var_dump() 类似，不同的是其返回的表示是合法的 PHP 代码。\n\n#### 序列化函数和反序列化函数\n- serialize 产生一个可存储的值的表示\n- unserialize 从已存储的表示中创建 PHP 的值\n\n#### 字符串处理函数\n- trim\n- explode  字符串切成数组\n- join  数组切成字符串  =>  implode 函数的别名\n- strrev  反转字符串\n- strstr  查找字符串的首次出现\n- number_format 以千位分隔符方式格式化一个数字，传入float类型 返回string 类型\n\n#### 数组函数\n- array_keys\n- array_values\n- array_diff 返回数组中不同的键值对\n- array_intersect 计算数组的交集\n\n### 正则表达式\n写出 11 位手机号码的正则表达式\n> 正则表达式的作用：分割，查找，匹配，替换字符串\n\n- 分隔符\n/ , #, ~  业界常用 /\n- 通用原子\n\\d => (0-9) , \\D => (\\d 取反) , \\s => (空白符) , \\S , \\w , \\W\n- 元字符\n. * ? ^ $ + {n} {n,} {n,m} [] () [^] | [-]\n- 模式修正符\ni m e(php7取消) s U x A D u\n- 后向引用\n- 贪婪模式\n- 常用函数\npreg_match()  preg_match_all() preg_replace() preg_split()\n- 中文匹配\nutf8 汉字编码范围0x4e00-0x9fa5 \ngb2312编码范围 0xb0-0xf7 0xa1-0xfe\nutf8要使用U修正符使模式字符串被当成utf8 \ngb2312要使用chr将ASCII码转为字符\n- 写正则的技巧\n先写出要匹配的字符串\n自左向右的顺序使用正则表达式的原子和元字符进行拼接\n最终加入模式修正符\n\n---\n\n文件与目录处理\n---\n\n### 文件读取基本函数\n- fopen()模式\nr 只读\nr+ 读写\nw 只写\nw+ 读写\na 追加\na+ 追加+读\nb 打开二进制文件\n- file_get_contents\n- file_put_contents\n\n\n### 读取远程文件\nphp.ini 需开启 allow_url_fopen,http协议只能是只读模式，ftp可以是只读和只写模式。\n\n### 目录相关函数\n名称相关 ： basename dirname pathinfo\n目录读取 ： opendir  readdir closedir rewinddir\n删除目录 ： rmdir  (该目录下必须为空才能删除)\n创建目录  ： mkdir \n磁盘大小 disk_free_space disk_total_space\n文件类型 filetype\n重名 rename 同时可以移动路径\n文件锁 flock\n\n### 面试题 \n通过PHP函数对目录进行遍历\n```\nfunction loopDir($dir)\n{\n\t$handle = opendir($dir);\n\t\n\twhile(false!==($file = readdir($handle))){\n\t\tif($file != '.' && $file != '..'){\n\t\t\techo $file.PHP_EOL;\n\t\t\tif(filetype($dir.'/'.$file) == 'dir'){\n\t\t\t\tloopDir($dir.'/'.$file);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n",[[1521423063458,["fangle@fangle-PC",[[-1,178,"w"],[1,179,"W"]],[178,179],[178,179]]]]]]}